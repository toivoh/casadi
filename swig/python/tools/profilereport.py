import sys
import re

import argparse

descr = """
This tool reads raw profile_log data (recorded in casadi with `CasadiOptions.startProfiling()`)
and creates an interactive webpage with the results.
"""

parser = argparse.ArgumentParser(description=descr,usage='python -mcasadi.tools.profilereport [-o OUTPUT] profile_log')
parser.add_argument('profile_log', type=argparse.FileType('r'),help='The filename of the raw profile_log as generated by casadi')
parser.add_argument("-o",dest="output",type=argparse.FileType('w'), help='html file to write report to')

args = parser.parse_args()

out = sys.stdout if args.output is None else args.output
f = args.profile_log

functiondict = {}

linereg = re.compile("^([\d\.]+) ns \| ([\d\.]+) ms \| (0x[\w\d]+:[\w_]+):(\d+)\|(0x[\w\d]+:[\w_]+)?\|(.*)$")

def parseline(line):
  m = re.match(linereg,line)
  if m:
    return (float(m.group(1))*1e-6, float(m.group(2))*1e-3, m.group(3), int(m.group(4)), m.group(5) , m.group(6) )
  else:
    return None
    
for l in f:
  r = parseline(l)
  if r is None: continue
  local , cumul, idn, loc, idnlink ,code = r
  if idn in functiondict:
    if loc==1:
      functiondict[idn]["ncalls"]+=1
      functiondict[idn]["localtimes"].append([])
    if functiondict[idn]["ncalls"]==1:
      functiondict[idn]["sourcecode"].append(code)
      functiondict[idn]["idnlinks"].append(idnlink)
    functiondict[idn]["localtimes"][-1].append(local)
  else:
    functiondict[idn] = {"sourcecode": [code], "ncalls": 1, "localtimes": [[local]], "idnlinks": [None] }

out.write("""
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <body>
""")

for k,v in functiondict.iteritems():
  v["localtime_internal"] = [sum(b if a is None else 0 for a,b in zip(v["idnlinks"],l)) for l in v["localtimes"]]
  v["localtime_external"] = [sum(0 if a is None else b for a,b in zip(v["idnlinks"],l)) for l in v["localtimes"]]
  v["localtime_total"] = [sum(l) for l in v["localtimes"]]
  v["calls"] = set(filter(lambda x: x is not None,v["idnlinks"]))
  
localtime_internal_total = sum(sum(v["localtime_internal"]) for k,v in functiondict.iteritems())

out.write("<table><thead><tr><th>Id</th><th>#calls</th><th>Total (s)</th><th>Internal (s)</th><th>External (s)</th></tr></thead>\n")
for k,v in functiondict.iteritems():
  out.write("<tr><td><a href='#%s'>%s</a></td><td>%d</td><td>%.5f</td><td>%.5f</td><td>%.5f</td></tr>\n" % (k,k,v["ncalls"],sum(v["localtime_total"]),sum(v["localtime_internal"]),sum(v["localtime_external"])))
out.write("<tr><th>Sum MX</th><th>/</th><th>/</th><th>%.5f</th><th>/</th></tr>\n" % (localtime_internal_total))
out.write("</table>\n")
  
for k,v in functiondict.iteritems():
  out.write("<a name='%s'><h2>%s #calls: %d</h2></a>\n" % (k,k,v["ncalls"]))
  out.write("<table><thead><tr><th>Codeline</th><th>total (ms)</th><th>ncalls</th><th>souce</th></tr></thead>\n")
  for i,s in enumerate(v["sourcecode"]):
    times = [lt[i] for lt in v["localtimes"]]
    if v["idnlinks"][i] is not None:
      s = "<a href='#%s'>%s</a>" % (v["idnlinks"][i],s)
    out.write("<tr><td>%d</td><td>%.5f</td><td>%d</td><td>%s</td></tr>\n" % (i,sum(times)*1e3,len(times),s))
  out.write("</table>\n")
    
out.write("""
  </body>
</html>
""")
